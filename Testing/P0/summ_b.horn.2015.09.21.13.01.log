Q'ARMC: Abstraction Refinement Model Checker for Horn clauses
[P0/summ_b.horn]
process tcs...done
elim_many_defs_one_use
tid count: 12

abstraction refinement iteration: 0
lfp iteration: 0 1 2 
1
2
3
maplist(flatten_clause_body, [clause([A=rat(2,1),B=rat(2,1),1=1],[],q2-[A,B]),clause([C=<0],[q2-[D,C]],q1-[D,C]),clause([E=rat(2,1),F=<rat(-1,1)],[q1-[E,F]],false-[])], _).
4
here 1
here 2
core_simplify_tree_like_horn_clauses(false, [clause([1=1,A=rat(2,1),B=rat(2,1)],q2(B,A)),clause([C=<0,q2(D,C)],q1(D,C)),clause([E=<rat(-1,1),F=rat(2,1),q1(F,E)],false)], _).
core_simplify_tree_like_horn_clauses: 3 -> 3
here 3
here 4
horn_solve([clause([A=rat(2,1),B=<rat(-1,1),q1(A,B)],false),clause([B=<0,q2(A,B)],q1(A,B)),clause([A=rat(2,1),B=rat(2,1)],q2(A,B))], [q1(_,C)-(rat(2,1)-C=<0),q2(_,D)-(rat(2,1)-D=<0)]).
h30(A,B):	2-B=<0
h2(A,B):	2-B=<0

abstraction refinement iteration: 1
lfp iteration: 0 1 2 
1
2
3
maplist(flatten_clause_body, [clause([A=rat(2,1),B=rat(2,1),1=1],[],q2-[A,B]),clause([C=rat(0,1),D>=1],[q2-[E,D]],q1-[E,C]),clause([F=rat(2,1),G=<rat(-1,1)],[q1-[F,G]],false-[])], _).
4
here 1
here 2
core_simplify_tree_like_horn_clauses(false, [clause([1=1,A=rat(2,1),B=rat(2,1)],q2(B,A)),clause([C>=1,D=rat(0,1),q2(E,C)],q1(E,D)),clause([F=<rat(-1,1),G=rat(2,1),q1(G,F)],false)], _).
core_simplify_tree_like_horn_clauses: 3 -> 2
here 3
here 4
horn_solve([clause([A=rat(2,1),B=<rat(-1,1),q1(A,B)],false),clause([B=rat(0,1),_>=rat(1,1)],q1(A,B))], [q1(_,C)-(-(C)=<0)]).
h30(A,B):	-(B)=<0

abstraction refinement iteration: 2
lfp iteration: 0 1 2 
1
2
3
maplist(flatten_clause_body, [clause([A=rat(2,1),B=rat(2,1),1=1],[],q2-[A,B]),clause([C=rat(0,1),D>=1],[q2-[E,D]],q1-[E,C]),clause([F=rat(2,1),G>=rat(1,1)],[q1-[F,G]],false-[])], _).
4
here 1
here 2
core_simplify_tree_like_horn_clauses(false, [clause([1=1,A=rat(2,1),B=rat(2,1)],q2(B,A)),clause([C>=1,D=rat(0,1),q2(E,C)],q1(E,D)),clause([F>=rat(1,1),G=rat(2,1),q1(G,F)],false)], _).
core_simplify_tree_like_horn_clauses: 3 -> 2
here 3
here 4
horn_solve([clause([A=rat(2,1),B>=rat(1,1),q1(A,B)],false),clause([B=rat(0,1),_>=rat(1,1)],q1(A,B))], [q1(_,C)-(C=<0)]).
h30(A,B):	B=<0

abstraction refinement iteration: 3
lfp iteration: 0 1 2 
1
2
3
maplist(flatten_clause_body, [clause([A=rat(2,1),B=rat(2,1),1=1],[],q6-[A,B]),clause([C=rat(0,1),D>=1],[q6-[E,D]],q1-[E,C]),clause([F=rat(2,1),G=rat(2,1),1=1],[],q5-[F,G]),clause([H=rat(0,1),I>=1],[q5-[J,I]],q2-[J,H]),clause([K=rat(2,1),L=rat(2,1),1=1],[],q4-[K,L]),clause([M=rat(0,1),N>=1],[q4-[O,N]],q3-[O,M]),clause([P=rat(2,1),Q=rat(0,1),R=rat(50,1),S=rat(0,1),T=rat(-5,1),U>=rat(-4,1)],[q1-[T,U],q2-[R,S],q3-[P,Q]],false-[])], _).
4
here 1
here 2
core_simplify_tree_like_horn_clauses(false, [clause([1=1,A=rat(2,1),B=rat(2,1)],q6(B,A)),clause([C>=1,D=rat(0,1),q6(E,C)],q1(E,D)),clause([1=1,F=rat(2,1),G=rat(2,1)],q5(G,F)),clause([H>=1,I=rat(0,1),q5(J,H)],q2(J,I)),clause([1=1,K=rat(2,1),L=rat(2,1)],q4(L,K)),clause([M>=1,N=rat(0,1),q4(O,M)],q3(O,N)),clause([P>=rat(-4,1),Q=rat(-5,1),R=rat(0,1),S=rat(50,1),T=rat(0,1),U=rat(2,1),q1(Q,P),q2(S,R),q3(U,T)],false)], _).
core_simplify_tree_like_horn_clauses: 7 -> 3
here 3
here 4
horn_solve([clause([_=rat(2,1),_=rat(0,1),_=rat(50,1),_=rat(0,1),A=rat(-5,1),B>=rat(-4,1),q1(A,B)],false),clause([B=rat(0,1),C>=rat(1,1),q6(A,C)],q1(A,B)),clause([C=rat(2,1),A=rat(2,1)],q6(A,C))], [q1(D,_)-(rat(2,1)-D=<0),q6(E,_)-(rat(2,1)-E=<0)]).
h30(A,B):	2-A=<0
h2(A,B):	2-A=<0

abstraction refinement iteration: 4
lfp iteration: 0 1 2 3 4 
1
2
3
maplist(flatten_clause_body, [clause([A=rat(2,1),B=rat(2,1),1=1],[],q6-[A,B]),clause([C=rat(0,1),D>=1],[q6-[E,D]],q3-[E,C]),clause([F=rat(2,1),G=rat(2,1),1=1],[],q5-[F,G]),clause([H=rat(0,1),I>=1],[q5-[J,I]],q4-[J,H]),clause([K=rat(50,1),L=rat(0,1),M=rat(2,1),N=rat(0,1),O=rat(-5,1),P=rat(-5,1),1=1],[q3-[M,N],q4-[K,L]],q2-[O,P]),clause([Q=<0],[q2-[R,Q]],q1-[R,Q]),clause([S=rat(2,1),T=<rat(-1,1)],[q1-[S,T]],false-[])], _).
4
here 1
here 2
core_simplify_tree_like_horn_clauses(false, [clause([1=1,A=rat(2,1),B=rat(2,1)],q6(B,A)),clause([C>=1,D=rat(0,1),q6(E,C)],q3(E,D)),clause([1=1,F=rat(2,1),G=rat(2,1)],q5(G,F)),clause([H>=1,I=rat(0,1),q5(J,H)],q4(J,I)),clause([1=1,K=rat(-5,1),L=rat(-5,1),M=rat(0,1),N=rat(2,1),O=rat(0,1),P=rat(50,1),q3(N,M),q4(P,O)],q2(L,K)),clause([Q=<0,q2(R,Q)],q1(R,Q)),clause([S=<rat(-1,1),T=rat(2,1),q1(T,S)],false)], _).
core_simplify_tree_like_horn_clauses: 7 -> 3
here 3
here 4
horn_solve([clause([A=rat(2,1),B=<rat(-1,1),q1(A,B)],false),clause([B=<0,q2(A,B)],q1(A,B)),clause([_=rat(50,1),_=rat(0,1),_=rat(2,1),_=rat(0,1),A=rat(-5,1),B=rat(-5,1)],q2(A,B))], [q1(C,_)-(rat(5,1)+C=<0),q2(D,_)-(rat(5,1)+D=<0)]).
h30(A,B):	5+A=<0
h2(A,B):	5+A=<0

abstraction refinement iteration: 5
lfp iteration: 0 1 2 3 4 
1
2
3
maplist(flatten_clause_body, [clause([A=rat(2,1),B=rat(2,1),1=1],[],q10-[A,B]),clause([C=rat(0,1),D>=1],[q10-[E,D]],q7-[E,C]),clause([F=rat(2,1),G=rat(2,1),1=1],[],q9-[F,G]),clause([H=rat(0,1),I>=1],[q9-[J,I]],q8-[J,H]),clause([K=rat(50,1),L=rat(0,1),M=rat(2,1),N=rat(0,1),O=rat(-5,1),P=rat(-5,1),1=1],[q7-[M,N],q8-[K,L]],q6-[O,P]),clause([Q=<0],[q6-[R,Q]],q1-[R,Q]),clause([S=rat(2,1),T=rat(2,1),1=1],[],q5-[S,T]),clause([U=rat(0,1),V>=1],[q5-[W,V]],q2-[W,U]),clause([X=rat(2,1),Y=rat(2,1),1=1],[],q4-[X,Y]),clause([Z=rat(0,1),A1>=1],[q4-[B1,A1]],q3-[B1,Z]),clause([C1=rat(2,1),D1=rat(0,1),E1=rat(50,1),F1=rat(0,1),G1=rat(-5,1),H1=<rat(-6,1)],[q1-[G1,H1],q2-[E1,F1],q3-[C1,D1]],false-[])], _).
4
here 1
here 2
core_simplify_tree_like_horn_clauses(false, [clause([1=1,A=rat(2,1),B=rat(2,1)],q10(B,A)),clause([C>=1,D=rat(0,1),q10(E,C)],q7(E,D)),clause([1=1,F=rat(2,1),G=rat(2,1)],q9(G,F)),clause([H>=1,I=rat(0,1),q9(J,H)],q8(J,I)),clause([1=1,K=rat(-5,1),L=rat(-5,1),M=rat(0,1),N=rat(2,1),O=rat(0,1),P=rat(50,1),q7(N,M),q8(P,O)],q6(L,K)),clause([Q=<0,q6(R,Q)],q1(R,Q)),clause([1=1,S=rat(2,1),T=rat(2,1)],q5(T,S)),clause([U>=1,V=rat(0,1),q5(W,U)],q2(W,V)),clause([1=1,X=rat(2,1),Y=rat(2,1)],q4(Y,X)),clause([Z>=1,A1=rat(0,1),q4(B1,Z)],q3(B1,A1)),clause([C1=<rat(-6,1),D1=rat(-5,1),E1=rat(0,1),F1=rat(50,1),G1=rat(0,1),H1=rat(2,1),q1(D1,C1),q2(F1,E1),q3(H1,G1)],false)], _).
core_simplify_tree_like_horn_clauses: 11 -> 3
here 3
here 4
horn_solve([clause([_=rat(2,1),_=rat(0,1),_=rat(50,1),_=rat(0,1),A=rat(-5,1),B=<rat(-6,1),q1(A,B)],false),clause([B=<0,q6(A,B)],q1(A,B)),clause([_=rat(50,1),_=rat(0,1),_=rat(2,1),_=rat(0,1),A=rat(-5,1),B=rat(-5,1)],q6(A,B))], [q1(_,C)-(rat(-5,1)-C=<0),q6(_,D)-(rat(-5,1)-D=<0)]).
h30(A,B):	 -5-B=<0
h2(A,B):	 -5-B=<0

abstraction refinement iteration: 6
lfp iteration: 0 1 2 3 4 
1
2
3
maplist(flatten_clause_body, [clause([A=rat(2,1),B=rat(2,1),1=1],[],q10-[A,B]),clause([C=rat(0,1),D>=1],[q10-[E,D]],q7-[E,C]),clause([F=rat(2,1),G=rat(2,1),1=1],[],q9-[F,G]),clause([H=rat(0,1),I>=1],[q9-[J,I]],q8-[J,H]),clause([K=rat(50,1),L=rat(0,1),M=rat(2,1),N=rat(0,1),O=rat(-5,1),P=rat(-5,1),1=1],[q7-[M,N],q8-[K,L]],q6-[O,P]),clause([Q=<0],[q6-[R,Q]],q1-[R,Q]),clause([S=rat(2,1),T=rat(2,1),1=1],[],q5-[S,T]),clause([U=rat(0,1),V>=1],[q5-[W,V]],q2-[W,U]),clause([X=rat(2,1),Y=rat(2,1),1=1],[],q4-[X,Y]),clause([Z=rat(0,1),A1>=1],[q4-[B1,A1]],q3-[B1,Z]),clause([C1=rat(2,1),D1=rat(0,1),E1=rat(50,1),F1=rat(0,1),G1=rat(-5,1),H1>=rat(-4,1)],[q1-[G1,H1],q2-[E1,F1],q3-[C1,D1]],false-[])], _).
4
here 1
here 2
core_simplify_tree_like_horn_clauses(false, [clause([1=1,A=rat(2,1),B=rat(2,1)],q10(B,A)),clause([C>=1,D=rat(0,1),q10(E,C)],q7(E,D)),clause([1=1,F=rat(2,1),G=rat(2,1)],q9(G,F)),clause([H>=1,I=rat(0,1),q9(J,H)],q8(J,I)),clause([1=1,K=rat(-5,1),L=rat(-5,1),M=rat(0,1),N=rat(2,1),O=rat(0,1),P=rat(50,1),q7(N,M),q8(P,O)],q6(L,K)),clause([Q=<0,q6(R,Q)],q1(R,Q)),clause([1=1,S=rat(2,1),T=rat(2,1)],q5(T,S)),clause([U>=1,V=rat(0,1),q5(W,U)],q2(W,V)),clause([1=1,X=rat(2,1),Y=rat(2,1)],q4(Y,X)),clause([Z>=1,A1=rat(0,1),q4(B1,Z)],q3(B1,A1)),clause([C1>=rat(-4,1),D1=rat(-5,1),E1=rat(0,1),F1=rat(50,1),G1=rat(0,1),H1=rat(2,1),q1(D1,C1),q2(F1,E1),q3(H1,G1)],false)], _).
core_simplify_tree_like_horn_clauses: 11 -> 3
here 3
here 4
horn_solve([clause([_=rat(2,1),_=rat(0,1),_=rat(50,1),_=rat(0,1),A=rat(-5,1),B>=rat(-4,1),q1(A,B)],false),clause([B=<0,q6(A,B)],q1(A,B)),clause([_=rat(50,1),_=rat(0,1),_=rat(2,1),_=rat(0,1),A=rat(-5,1),B=rat(-5,1)],q6(A,B))], [q1(_,C)-(rat(5,1)+C=<0),q6(_,D)-(rat(5,1)+D=<0)]).
h30(A,B):	5+B=<0
h2(A,B):	5+B=<0

abstraction refinement iteration: 7
lfp iteration: 0 1 2 3 4 
mcc...
  checking tcs...
  done
false-A false
h2-[A,B] 5+B=<0, -5-B=<0,5+A=<0; -5-B=<0,2-A=<0,2-B=<0
h30-[A,B] 5+B=<0, -5-B=<0,5+A=<0,B=<0; -5-B=<0,2-A=<0,B=<0,-(B)=<0
h1-[A,B,C,D,E,F] D=A,F=C,E=B
h3-A false
h24-A false
h4-A false
h25-A false
h27-A false
h26-A false
h29-A false
h28-A false
h31-A false
h6-A false
h9-A false
h7-A false
h8-A false
h10-A false
h12-A false
h15-A false
h13-A false
h14-A false
h16-A false
h18-A false
h19-A false
h20-A false
h21-A false
h22-A false
done
abstract_query(h2, [1,2,4], 1).
abstract_query(h30, [2,3,4,6], 2).
abstract_query(h2, [3,4,5], 3).
abstract_query(h30, [3,5,6,7], 4).


Q'ARMC: program is correct

h30(A,B):	#7:	2-B=<0, -(B)=<0, B=<0, 2-A=<0, 5+A=<0,  -5-B=<0, 5+B=<0
h2(A,B):	#5:	2-B=<0, 2-A=<0, 5+A=<0,  -5-B=<0, 5+B=<0
Time on resolve tree-like horn clauses:           0.00s.
Time on ranking function generation:              0.00s.
Time on preprocess:                               0.00s.
Time on s_tl0:                                    0.00s.
Time on s_tl1:                                    0.00s.
Time on s_tl2:                                    0.00s.
Time on s_tl3:                                    0.00s.
Time on s_tl4:                                    0.00s.
Time on s_tl5:                                    0.00s.
Time on s_tl7:                                    0.00s.
Time on s_tl8:                                    0.00s.
Time on cs2:                                      0.00s.
Time on cs3:                                      0.00s.
Time on cs4:                                      0.00s.
Time on s_tl:project:                             0.00s.
Time on s_tl6:                                    0.00s.
Time on cs0:                                      0.00s.
Time on cs1:                                      0.00s.
Time on abstract_head:                            0.00s.
Time on assert_abstract_query:                    0.00s.
Time on Model Checker Checker:                    0.00s.
Time on input:                                    0.01s.
Time on refinement:                               0.01s.
Time on concretize_cube:                          0.01s.
Time on total without MCC:                        0.03s.
Time on total with MCC:                           0.03s.
